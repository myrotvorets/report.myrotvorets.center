{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2018,
    "project": ["./tsconfig.json"],
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unsafe-assignment": 0,
    "@typescript-eslint/no-unsafe-member-access": 0,

    // Force function overloads to be declared together. This ensures readers understand APIs.
    "@typescript-eslint/adjacent-overload-signatures": "error",

    // Warn when an empty interface is defined. These are generally not useful.
    "@typescript-eslint/no-empty-interface": "warn",

    // Do not allow internal modules or namespaces . These are deprecated in favor of ES6 modules.
    "@typescript-eslint/no-namespace": "error",

    // Do not allow type assertions that do nothing. This is a big warning that the developer may not understand the
    // code currently being edited (they may be incorrectly handling a different type case that does not exist).
    "@typescript-eslint/no-unnecessary-type-assertion": "error",

    // prefer for( ... of ... ) to an index loop when the index is only used to fetch an object from an array.
    // (Even better: check out utils like .map if transforming an array!)
    "@typescript-eslint/prefer-for-of": "warn",

    // Force the use of ES6-style imports instead of /// <reference path=> imports.
    "@typescript-eslint/triple-slash-reference": "error",
    
    // Warns if function overloads could be unified into a single function with optional or rest parameters.
    "@typescript-eslint/unified-signatures": "warn",
    
    // Do not allow super() to be called twice in a constructor.
    "constructor-super": "error",
    
    // Disallows the (often typo) syntax if (var1 = var2). Replace with if (var2) { var1 = var2 }.
    "no-cond-assign": "error",
    
    // Do not allow the same case to appear more than once in a switch block.
    "no-duplicate-case": "error",

    // Empty blocks are almost never needed. Allow the one general exception: empty catch blocks.
    "no-empty": [
      "error",
      {
        "allowEmptyCatch": true
      }
    ],
    "no-empty-function": "error",

    // The 'this' keyword can only be used inside of classes.
    "no-invalid-this": "error",

    // Disallows constructors for primitive types (e.g. new Number('123'), though Number('123') is still allowed).
    "no-new-wrappers": "error",
    
    // Do not allow parameters to be reassigned. To avoid bugs, developers should instead assign new values to new vars.
    "no-param-reassign": "error",
    
    // Do not allow the subtle/obscure comma operator.
    "no-sequences": "error",

    // Do not allow strings to be thrown because they will not include stack traces. Throw Errors instead.
    "no-throw-literal": "error",

    // Disallow control flow statements, such as return, continue, break, and throw in finally blocks.
    "no-unsafe-finally": "error",

    // Disallow nonsensical label usage.
    "no-unused-labels": "error",

    // Warn when variables are defined with var. Var has subtle meaning that can lead to bugs. Strongly prefer const for
    // most values and let for values that will change.
    "no-var": "warn",

    // Prefer const for values that will not change. This better documents code.
    "prefer-const": "warn"
    // "@typescript-eslint/tslint/config": [
    //   "error",
    //   {
    //     "rules": {
    //       // Warn when using deprecated APIs.
    //       "deprecation": true,
          
    //       // Disallow duplicate imports in the same file.
    //       "no-duplicate-imports": true,

    //       // Do not allow a variable to be declared more than once in the same block. Consider function parameters in this
    //       // rule.
    //       "no-duplicate-variable": [
    //         true,
    //         "check-parameters"
    //       ],

    //       // Do not allow any imports for modules that are not in package.json. These will almost certainly fail when
    //       // deployed.
    //       "no-implicit-dependencies": true,

    //       // Warn when an import will have side effects.
    //       "no-import-side-effect": true,
    //       "no-shadowed-variable": true,

    //       // Expressions must always return a value. Avoids common errors like const myValue = functionReturningVoid();
    //       "no-void-expression": [
    //         true,
    //         "ignore-arrow-function-shorthand"
    //       ],

    //       // Multi-line object literals and function calls should have a trailing comma. This helps avoid merge conflicts.
    //       "trailing-comma": true,

    //       // Prefer === and !== over == and !=. The latter operators support overloads that are often accidental.
    //       "triple-equals": true
    //     }
    //   }
    // ]
  },
  "globals": {}
}
